version: "3.8"

services:
  # MySQL Database for WordPress
  db:
    image: mysql:8.0
    container_name: offgrid-db
    restart: unless-stopped
    environment:
      VAULT_ADDR: ${VAULT_ADDR:-http://host.docker.internal:8200}
      MYSQL_ROLE_ID: ${MYSQL_ROLE_ID:-}
      MYSQL_SECRET_ID: ${MYSQL_SECRET_ID:-}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-dev_root_password_change_me}
      MYSQL_DATABASE: ${DB_NAME:-wordpress}
      MYSQL_USER: ${DB_USER:-wpuser}
      MYSQL_PASSWORD: ${DB_PASSWORD:-dev_wp_password_change_me}
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - offgrid-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # WordPress Multisite CMS
  wordpress:
    build:
      context: ./docker/wordpress
      dockerfile: Dockerfile
    container_name: offgrid-wordpress
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      VAULT_ADDR: ${VAULT_ADDR:-http://host.docker.internal:8200}
      WORDPRESS_ROLE_ID: ${WORDPRESS_ROLE_ID:-}
      WORDPRESS_SECRET_ID: ${WORDPRESS_SECRET_ID:-}
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_NAME: ${DB_NAME:-wordpress}
      WORDPRESS_DB_USER: ${DB_USER:-wpuser}
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD:-dev_wp_password_change_me}
      WP_ADMIN_USER: ${WP_ADMIN_USER:-admin}
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD:-dev_admin_password_change_me}
      WORDPRESS_CONFIG_EXTRA: |
        /* Debug */
        define('WP_DEBUG', ${WP_DEBUG:-true});
        define('WP_DEBUG_LOG', true);
        define('WP_DEBUG_DISPLAY', false);
    volumes:
      - wp_data:/var/www/html
      - ./wordpress/plugins/pt-hub:/var/www/html/wp-content/plugins/pt-hub
      - ./wordpress/themes:/var/www/html/wp-content/themes
    ports:
      - "8080:80"
    networks:
      - offgrid-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: offgrid-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - offgrid-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI AI Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: offgrid-ai-service
    restart: unless-stopped
    environment:
      VAULT_ADDR: ${VAULT_ADDR:-http://host.docker.internal:8200}
      AI_SERVICE_ROLE_ID: ${AI_SERVICE_ROLE_ID}
      AI_SERVICE_SECRET_ID: ${AI_SERVICE_SECRET_ID}
      USE_VAULT: ${USE_VAULT:-true}
      REDIS_URL: redis://redis:6379
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "8001:8000"
    volumes:
      - ./ai-service:/app
      - /app/__pycache__
    networks:
      - offgrid-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: offgrid-frontend
    restart: unless-stopped
    environment:
      VAULT_ADDR: ${VAULT_ADDR:-http://host.docker.internal:8200}
      FRONTEND_ROLE_ID: ${FRONTEND_ROLE_ID}
      FRONTEND_SECRET_ID: ${FRONTEND_SECRET_ID}
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8001}
      NEXT_PUBLIC_WP_URL: ${NEXT_PUBLIC_WP_URL:-http://localhost:8080}
      WORDPRESS_API_URL: http://wordpress/wp-json
      AI_SERVICE_URL: http://ai-service:8001
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - offgrid-network
    depends_on:
      - wordpress
      - ai-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db_data:
  wp_data:
  redis_data:

networks:
  offgrid-network:
    driver: bridge
